#!/bin/bash -ue
#
# install - Installer for Android Studio IDE in Debian/Ubuntu/Mint
#
#    Copyright (C) 2015 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>

# TODO:
# - install udev rules
# - enable KVM hardware vitualization acceleration
# - recommended packages
# - Java

# ---------------------------------------------------------------
# User preferences

# Root path used as prefix for other relevant directories
rootdir="$HOME"/.local/opt/android

# Path to install the Android Studio IDE
idedirname=studio

# Path to desktop integration files (icons, menu, etc)
xdgdir="$rootdir"/xdg

# Path to download archives
# Other than the default, good candidates are:
# downloadsdir=${XDG_CACHE_HOME:-"$HOME"/.cache}/"$basename"
# downloadsdir=$(mktemp -d); trap 'rm -rf "$downloadsdir"' -EXIT
downloadsdir="$rootdir"/downloads

# Flags and options
verbose=1

# ---------------------------------------------------------------
# Constants and globals - do NOT change!

basename=android-studio  # must match icon files in $mydir/icons
mainurl='https://developer.android.com/studio'

myname=${0##*/}
mydir=$(dirname "$(readlink -f "$0")")

idedir="$rootdir"/"${idedirname##*/}"
icondir="$mydir"/icons
bindir=${XDG_BIN_HOME:-$HOME/.local/bin}
exec="$idedir"/bin/studio.sh

# ---------------------------------------------------------------
# Helper functions

have_x11() { [[ "${DISPLAY:-}" ]]; }

bold()    { tput bold; printf '%s' "$@"; tput sgr0; }
red()     { tput setaf 1; bold "$@"; }
green()   { tput setaf 2; bold "$@"; }

fatal()   { (($#)) && { red "$@"; echo; } >&2 || :; exit 1; }
message() { ((verbose)) && { green '* ' "$@"; echo; } || :; }

unzip-strip() (
	set -eu
	local archive=$1
	local destdir=${2:-}
	shift; shift || :
	local tmpdir=$(mktemp -d)
	trap 'rm -rf -- "$tmpdir"' EXIT
	unzip -qd "$tmpdir" -- "$archive"
	shopt -s dotglob
	local files=("$tmpdir"/*) name i=1
	if (( ${#files[@]} == 1 )) && [[ -d "${files[0]}" ]]; then
		name=$(basename "${files[0]}")
		files=("$tmpdir"/*/*)
	else
		name=$(basename "$archive"); name=${archive%.*}
		files=("$tmpdir"/*)
	fi
	if [[ -z "$destdir" ]]; then
		destdir=./"$name"
	fi
	while [[ -f "$destdir" ]]; do destdir=${destdir}-$((i++)); done
	mkdir -p "$destdir"
	cp -ar "$@" -t "$destdir" -- "${files[@]}"
)

# ---------------------------------------------------------------
# Parse website for EULA, download URL and its SHA1

message "Hit $mainurl to get download URL and License Agreement"

{
read -r sha url intro
# Icon:
# <link rel="shortcut icon" href="https://.../.../favicon.png">
if have_x11; then
	zenity --text-info \
		--width 950 --height 500 \
		--window-icon "$icondir"/studio.png \
		--ok-label "Download and install ${url##*/}" \
		--checkbox "I have read and agree with the above terms and conditions" \
		--title "${intro}"
else
	# No X11, show EULA using a console dialog
	# less(1) is also a good choice, see man(1) for prompts
	# less -P "Scroll down to read until the end of the terms,
	#	"press 'q' to agree with terms or CTRL+C to cancel" -K
	if ((${#intro} > $(tput cols) - 5)); then
		whiptail --title "Android Software Development Kit License Agreement" \
			--scrolltext \
			--yesno "$intro\n\n$(cat)\n(END)" \
				$(($(tput lines)-3)) $(($(tput cols)-3)) \
			--yes-button "I have read and agree"
	else
		whiptail --title "$intro" \
			--scrolltext \
			--yesno "$(cat)\n(END)" \
				$(($(tput lines)-3)) $(($(tput cols)-3)) \
			--yes-button "I have read and agree with the above terms and conditions"
	fi
fi
} < <(
wget -q -O - "$mainurl" |
awk -v key='studio_linux_bundle_download' '
	BEGIN {
		IGNORECASE = 1
		ss = "[\n\t ]+"       # mandatory whitespace
		sp = "[\n\t ]*"       # optional whitespace
		qt = "[\x22\x27]"     # a single quote
		ct = "[^>]*"          # optional everything until close tag >
		nq = "[^\x22\x27>]*"  # zero or more not quotes or <
		RS = "</" ct ">" sp   # Any HTML closing tag with optional trailing space
		terms = ""
	}

	# Linux EULA marker: after id = key
	$0 ~ ss "id" sp "=" sp qt key qt { linux = 1 }

	# INTRO: first <p> after linux
	linux && ! intro && $0 ~ "^<p(" ss ct ")?>" {
		gsub(/\n/, " ")       # join lines with a single space
		gsub("<" ct ">", "")  # remove tags (the opening <p> itself)
		intro = $0
	}

	# TERMS: after linux, all content after class containing "sdk-terms" until the next <div>
	linux && $0 ~ ss "class" sp "=" sp qt nq "sdk-terms" nq qt  { eula = NR }
	linux && eula && NR > eula && /^<div/                       { eula = 0; linux = 0 }
	eula && /<(div|h[1-6])/ {
		$0 = $0 "\n\n"  # For <div> and headers <hN> add trailing blank line
	}
	eula {
		gsub("<" ct ">", "")  # Remove tag
		terms = terms $0
	}

	# URL: href when data-category = key
	$0 ~ ss "data-category" sp "=" sp qt key qt &&
	$0 ~ ss "href" sp "=" {
		sub(".*href" sp "=" sp qt, "")
		sub(qt ".*", "")
		url=$0
	}

	# SHA: <td> with SHA256 length (64) after first key appearance
	! sha && $0 ~ key { getsha=1 }
	! sha && getsha && /^<td/ {
		sub(".*>" sp, "")
		sub(sp "$", "")
		if (length($0) == 64) {
			sha=$0
		}
	}
	END {
		sub("^" sp, "", terms)
		sub(sp "$", "", terms)
		print sha "\t" url "\t" intro
		print terms
	}
') || fatal "Canceled by user"


# ---------------------------------------------------------------
# Download archive, check integrity and extract

message "Download archive"

archive="$downloadsdir"/"${url##*/}"
mkdir -p "$downloadsdir"
wget -NP "$downloadsdir" --no-if-modified-since -- "$url"

message "Verify archive integrity and extract to: $idedir"
sha256sum  --check - <<< "$sha  $archive"
mkdir -p "$idedir"

shopt -s extglob
case "$archive" in
*.zip) unzip_strip "$archive" "$idedir" -u;;
*.tar.@(gz|bz2|xz)) tar -xaf "$archive" -C "$idedir" --strip-components=1 --skip-old-files;;
*) fatal "unsupported archive type: $archive";;
esac
shopt -u extglob

# Enable KVM hardware vitualization acceleration, if supported by the CPU
if egrep -q '(vmx|svm)' /proc/cpuinfo; then
	message "KVM supported! Android emulation can use hardware acceleration"
fi

message "Install desktop integration: launcher, icons and menu entry"
if ! [[ -f "$bindir"/"$basename" ]]; then
	ln -s "$exec" "$bindir"/"$basename"
fi
mkdir -p -- "$xdgdir"
for icon in "$mydir"/icons/"$idedirname"-*.png; do
	cp -- "$icon" "$xdgdir"
	size=$(identify -format '%w' "$icon")
	xdg-icon-resource install --noupdate --novendor --size "$size" "$icon" "$basename"
done
xdg-icon-resource forceupdate

cat > "$xdgdir"/"$basename".desktop <<-EOF
	[Desktop Entry]
	Version=1.0
	Type=Application
	Name=Android Studio IDE
	GenericName=Mobile IDE
	Comment=Create Android Apps
	Categories=Development;IDE;
	Terminal=false
	StartupNotify=true
	StartupWMClass=jetbrains-studio
	Icon=$basename
	Exec=$basename %f
EOF
xdg-desktop-menu install --novendor "$xdgdir"/"$basename".desktop

message "Done!"
