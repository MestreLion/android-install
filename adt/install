#!/bin/bash
#
# install - Installer for ADT - Android Developer Tools, in Debian/Ubuntu/Mint
#
#    Copyright (C) 2013 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>

# TODO: Install udev rules!

# ---------------------------------------------------------------
# User-modifiable stuff...

# App name in menus, Launchers, etc (inside .desktop file)
name="Android Developer Tools"

# executable (also affects dir, icon and .desktop file names)
exec=adt

# install prefix
prefix=${XDG_DATA_HOME:-"$HOME"/.local}

# Icon
icon_source=archive
icon_archive=eclipse/plugins/com.android.ide.eclipse.adt.package_
icon_size=0  # 0 = auto-identify (requires ImageMagik)

# Url for ADT Bundles
url=http://developer.android.com/sdk/index.html

# Flags and etc...
verbose=1
logout=1
uninstall=0


# ---------------------------------------------------------------
# Boring UI stuff...

myname="${0##*/}"
mydir=$(dirname "$(readlink -f "$0")")

fatal()   { [[ "$1" ]] && echo "$myname: error: $1" >&2 ; exit ${2:-1} ; }
invalid() { echo "$myname: invalid option: $1" >&2 ; usage 1 ; }
missing() { echo "$myname: missing ${1:+$1 }operand" >&2 ; usage 1 ; }
message() { ((verbose)) && echo "* $1" ; }
quit()    { message "Goodbye!" ; exit; }

usage() {
	cat <<- USAGE
	Usage: $myname [options] [--|--archive FILE]
	USAGE
	if [[ "$1" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<USAGE

An installer for ADT - Android Developer Tools, in Debian/Ubuntu/Mint

Allows coexistence of multiple versions. Extracts original archive and properly
creates desktop file, icon(s) and executable.

Tested with ADT 20130219 (SDK 21.1)

Options:
-h|--help  - show this page.
-q|--quiet - supress informative messages.

--exec=NAME
	executable name, also used as a prefix for naming the install directory,
	icon and .desktop files. Default is "$exec"

--prefix=DIR
	parent of the install directory. Default is "$prefix"

--name=NAME
	friendly application name, for menu entries. Default is "$name"

--custom-icon=FILE [--icon-size=SIZE]
	Use the custom icon FILE. If ImageMagik is not installed, icon SIZE
	(32, 48, 64, etc) must be provided.

--archive=FILE
	the zip archive downloaded from Android website. If none is provided,
	a menu will show currently downloaded files and an option to download
	from "$url"

--uninstall
	Uninstall ${name}. Combine with --exec and --prefix to
	uninstall from a custom install

Copyright (C) 2013 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
USAGE
	exit 0
}

for arg in "$@"; do case "$arg" in -h|--help) usage ;; esac; done
while (( $# )); do
	case "$1" in
	-h|--help        ) usage                        ;;
	-q|--quiet       ) verbose=0                    ;;
	--name=*         ) name="${1#*=}"               ;;
	--exec=*         ) exec="${1#*=}"               ;;
	--prefix=*       ) prefix="${1#*=}"             ;;
	--archive=*      ) archive="${1#*=}"            ;;
	--icon-size=*    ) icon_size="${1#*=}"          ;;
	--custom-icon=*  ) icon="${1#*=}"
	                   icon_source="user"           ;;
	--name           ) shift ; name="$1"            ;;
	--exec           ) shift ; exec="$1"            ;;
	--prefix         ) shift ; prefix="$1"          ;;
	--archive        ) shift ; archive="$1"         ;;
	--icon-size      ) shift ; icon_size="$1"       ;;
	--custom-icon    ) shift ; icon="$1"
	                   icon_source="user"           ;;
	--uninstall      ) uninstall=1                  ;;
	--               ) shift ; break                ;;
	-*               ) invalid "$1"                 ;;
	*                ) archive="$1" ; break         ;;
	esac
	shift
done

# Other arguments      --------------------------------------------

[[ "$name"   ]] || missing "name"
[[ "$exec"   ]] || missing "exec"
[[ "$prefix" ]] || missing "prefix"

case "$icon_source" in
	archive  ) icon="$icon_archive" ;;
	user     ) [[ "$icon" ]]    || missing "custom-icon"
	           [[ -f "$icon" ]] ||
	           fatal "custom icon file '$icon' not found" ;;
esac

((verbose)) && v=v

dir=${prefix}/opt/${exec}
execdir=${prefix}/bin
appdir=${prefix}/share/${exec}

# Uninstall  ---------------------------------------------

((uninstall)) && {

	msg="Are you sure you want to uninstall ${exec}?"
	read -r -p "$msg (yes,NO): " confirm
	case "$confirm" in
	[Yy]*)
		userdir="$HOME/.android/"
		msg="Also remove settings ($userdir)?"
		read -r -p "$msg (yes,NO): " confirm
		case "$confirm" in
		[Yy]*)
			message "removing user settings"
			rm -rf${v} "$userdir"
		;;
		esac

		message "removing desktop file"
		xdg-desktop-menu uninstall "$exec.desktop"

		message "removing icons"
		shopt -s nullglob
		for icon in "$appdir"/*.{png,xpm,svg} ; do
			icon_size=${icon##*-}
			icon_size=${icon_size%%.*}
			xdg-icon-resource uninstall --noupdate \
				--size "$icon_size" "$exec" 2>/dev/null
		done
		shopt -u nullglob
		xdg-icon-resource forceupdate

		message "removing executable"
		rm -rf${v} "$execdir/$exec"

		message "removing install dir"
		rm -rf${v} "$dir"

		message "Successfully uninstalled ${name}!"
	;;
	esac

	exit
}

# ---------------------------------------------------------------
# Installer begins here (but still boring)

((verbose)) && printf "\n${name^^} INSTALLER\n\n"


[[ "$archive" ]] || {

	cd "$mydir"
	shopt -s nullglob
	options=( *.zip "Download more at $url" )
	shopt -u nullglob

	message "Available bundles:"
	PS3="Choose an install (0 to quit): "

	select archive in "${options[@]}"; do
		((REPLY==${#options[@]})) && {
			message "Opening your web browser..." ;
			message "Choose your ADT flavor(s), download and save to"
			message "$mydir"
			message "... and run me again"
			xdg-open "$url"
			REPLY=0
		}
		((REPLY==0)) && quit
		[[ "$archive" ]] && break
	done
	echo ""
	archive="${mydir}/${archive}"
	cd - >/dev/null
}

((verbose)) && {
	echo "Install details:"
	echo "App name     = $name"
	echo "Executable   = $exec"
	echo "Icon(s)      = $icon_source: $icon"
	echo "Install dir  = $dir"
	echo "Archive      = $(basename "$archive")"
	echo "To change these options, see $myname --help"
	read -r -p "Confirm? (YES,no): " confirm
	case "$confirm" in
	[Nn]*) quit
	esac
	echo ""
}


type java >/dev/null 2>&1 || {
	msg="Java JDK is not installed, want to install it now?"
	msg+=" (requires administrative priviledges)"
	read -r -p "$msg (yes,NO): " confirm
	case "$confirm" in
	[Yy]*) sudo apt-get install default-jdk ||
		fatal "could not install Java JDK" ;;
	*) message "Please install a java JRE and run me again"
	   quit;;
	esac
}


[[ -e "$dir" ]] && {
	msg="Install directory $dir already exists. Delete it before proceding?"
	read -r -p "$msg (yes,NO): " confirm
	case "$confirm" in
	[Yy]*) message "removing $dir" ;
	       rm -rf "$dir" || fatal "could not remove $dir" ;;
	esac
}

# ---------------------------------------------
# Some neat helper functions

get_icon_size()
{
	local icon="$1"
	local size="$2"
	local filetitle="${icon%.*}"

	((size)) && { echo "$size" ; return ; }

	if type identify >/dev/null 2>&1; then
		identify -format '%w' "$icon"
	else
		if [[ "${filetitle,,}.xpm" == "$icon" ]]; then
			awk 'NR==3{print $2}' "$icon"
		else
			return 1
		fi
	fi
}

#FIXME: relexecdir in addpath() assumes XDG_DATA_HOME is within user's $HOME.
# While this is true for the default ~/.local, and also for any *sane* setting,
# XDG spec does not require so, and thus we should not rely on that

addpath()
{
	local execdir="$1"
	local relexecdir=${execdir#$HOME/}
	message "adding ~/${relexecdir} to your \$PATH in ~/.profile"
	cat >> "$HOME/.profile" <<-EOF

	# Included by $name install
	# set PATH so it includes user's ~/${relexecdir} if it exists
	if [ -d "\$HOME/$relexecdir" ] ; then
	    PATH="\$HOME/$relexecdir:\$PATH"
	fi
	EOF
}

unzip-strip() (
	local zip=$1
	local dest=${2:-.}
	shift; shift
	local temp=$(mktemp -d) &&
	unzip "$@" -d "$temp" "$zip" &&
	mkdir -p "$dest" &&
	shopt -s dotglob &&
	local f=("$temp"/*) &&
	if (( ${#f[@]} == 1 )) && [[ -d "${f[0]}" ]] ; then
		mv "$temp"/*/* "$dest"
	else
		mv "$temp"/* "$dest"
	fi &&
	rmdir "$temp"/* "$temp"
)

# ---------------------------------------------
# Now the fun begins

# Install dir and archive
message "extracting $(basename "$archive") to $dir"
unzip-strip "$archive" "$dir" -q ||
	fatal "could not extract archive $archive in $dir"


# Executable script
message "symlinking $dir/eclipse/eclipse executable as $execdir/$exec"
mkdir -p${v} "$execdir" &&
rm -rf "$execdir/$exec" &&
ln -s "$dir/eclipse/eclipse" "$execdir/$exec" ||
	fatal "could not create executable"
ifs=$IFS
IFS=:
for pathdir in $PATH ; do
	[[ "$pathdir" == "$execdir" ]] && { logout=0 ; break ; }
done
IFS=$ifs
((logout)) && addpath "$execdir"


# Icon
message "installing icon(s)"
case "$icon_source" in
	archive)
		shopt -s nullglob
		icons=( "$dir/$icon_archive"*/{,icons/}*.{png,xpm,svg} )
		shopt -u nullglob
	;;
	user   ) icons=( "$icon" );;
esac
mkdir -p "$appdir"
for icon in "${icons[@]}"; do
	icon_size=$(get_icon_size "$icon" "$icon_size") ||
		fatal "could not determine icon size. Use --icon-size=SIZE"
	[[ "$icon_source" == "archive" ]] && message "found icon $(basename "$icon") [size=$icon_size]"
	newicon="$appdir/${exec}-${icon_size}.${icon##*.}"
	cp "$icon" "$newicon"
	xdg-icon-resource install --novendor --noupdate --size "$icon_size" "$newicon" "$exec" ||
		fatal "could not install icon"
	icon_size=0
done
xdg-icon-resource forceupdate


# Desktop file
message "creating desktop file"
cat > "$appdir/$exec.desktop" <<-DESKTOP
	[Desktop Entry]
	Version=1.0
	Type=Application
	Name=$name
	Comment=Android SDK and IDE Bundle
	GenericName=Android IDE
	Icon=$exec
	Exec=$exec
	Terminal=false
	StartupNotify=true
	StartupWMClass=ADT
	Categories=Development;IDE;
DESKTOP
xdg-desktop-menu install --novendor "$appdir/$exec.desktop" ||
	fatal "could not install desktop entry"


message "Succesfully installed ${name}!"
((logout)) && echo && echo && "Log out for changes to \$PATH to apply..."
